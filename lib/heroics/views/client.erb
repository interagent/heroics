# encoding: utf-8
# frozen_string_literal: true

#
# WARNING: Do not edit by hand, this file was generated by Heroics:
#
#   https://github.com/interagent/heroics
#

require 'heroics'
require 'uri'
require 'moneta'

module <%= module_name %>
  # Get a Client configured to use HTTP Basic or header-based authentication.
  #
  # @param api_key [String] The API key to use when connecting.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache`, `user` and `url`.
  # @return [Client] A client configured to use the API with HTTP Basic
  #   or header-based authentication.
  def self.connect(api_key, options=nil)
    options = custom_options(options)
    uri = URI.parse(options[:url])

    if options[:user]
      uri.user = URI.encode_www_form_component options[:user]
    end

    if api_key
      uri.user ||= 'user'
      uri.password = api_key
    end

    client = Heroics.client_from_schema(SCHEMA, uri.to_s, options)
    Client.new(client)
  end

  # Get a Client configured to use OAuth authentication.
  #
  # @param oauth_token [String] The OAuth token to use with the API.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache` and `url`.
  # @return [Client] A client configured to use the API with OAuth
  #   authentication.
  def self.connect_oauth(oauth_token, options=nil)
    options = custom_options(options)
    url = options[:url]
    client = Heroics.oauth_client_from_schema(oauth_token, SCHEMA, url, options)
    Client.new(client)
  end

  # Get a Client configured to use Token authentication.
  #
  # @param token [String] The token to use with the API.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache` and `url`.
  # @return [Client] A client configured to use the API with OAuth
  #   authentication.
  def self.connect_token(token, options=nil)
    options = custom_options(options)
    url = options[:url]
    client = Heroics.token_client_from_schema(token, SCHEMA, url, options)
    Client.new(client)
  end

  # Get customized options.
  def self.custom_options(options)
    return default_options if options.nil?

    final_options = default_options
    if options[:default_headers]
      final_options[:default_headers].merge!(options[:default_headers])
    end
    final_options[:cache] = options[:cache] || <%= cache %>
    final_options[:url] = options[:url] if options[:url]
    final_options[:user] = options[:user] if options[:user]
    final_options
  end

  # Get the default options.
  def self.default_options
    default_headers = <%= default_headers %>
    {
      default_headers: default_headers,
      url:             "<%= url %>"
    }
  end

  private_class_method :default_options, :custom_options

  # <%= description %>
  class Client
    def initialize(client)
      @client = client
    end
    <% for resource in resources %>

    # <%= resource.description %>
    #
    # @return [<%= resource.class_name %>]
    def <%= resource.name %>
      @<%= resource.name %>_resource ||= <%= resource.class_name %>.new(@client)
    end
    <% end %>
  end

  private
  <% for resource in resources %>

  # <%= resource.description %>
  class <%= resource.class_name %>
    def initialize(client)
      @client = client
    end
    <% for link in resource.links %>

    # <%= link.description %>
    <% unless link.parameters.empty? %>
    #
    <% for parameter in link.parameters %>
    # @param <%= parameter.name %>: <%= parameter.description %>
    <% end %>
    <% end %>
    def <%= link.name %>(<%= link.method_signature %>)
      @client.<%= resource.name %>.<%= link.name %>(<%= link.parameter_names %>)
    end
    <% end %>
  end
  <% end %>

  SCHEMA = Heroics::Schema.new(MultiJson.load(<<-'HEROICS_SCHEMA'))
<%= schema %>
HEROICS_SCHEMA
end
